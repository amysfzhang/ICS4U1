package com.mycompany.u2a3_amyzhang;
import java.util.*; //for ArrayLists
import java.text.*; //for DecimalFormat
import java.io.*; //for IOException
import javax.swing.*; //for imageIcon
import javax.swing.table.DefaultTableModel;

/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */

/**
 *
 * @author Amy Zhang
 * Date November 10, 2023
 * Tile price calculator for the price of a floor composed of multiple shapeNames
 * 
 */
        
public class TileCalculator extends javax.swing.JFrame {

    ArrayList<Shape> shapes = new ArrayList<Shape>();
    
    /**
     * Creates new form TilePriceCalculator
     */
    public TileCalculator() {
        initComponents();
        //unselect combobox option
        comboBox.setSelectedIndex(-1);
        
        //reset visibility of input dimensions
        txtDimension1.setVisible(false);
        txtDimension2.setVisible(false);
        txtDimension3.setVisible(false);
        lblDimension1.setVisible(false);
        lblDimension2.setVisible(false);
        lblDimension3.setVisible(false);
        
        //add total row to table
        DefaultTableModel tableModel = (DefaultTableModel)shapesTable.getModel();
        tableModel.addRow(new Object[]{"Total: ", 0, 0});
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        comboBox = new javax.swing.JComboBox<>();
        //name of all options
        String[] shapeNames = {"Rectangle", "Parallelogram", "Triangle", "Circle", "Square", "Donut", "Xor Venn Diagram", "Trapezoid", "Ellipse"};
        //add to comboBox
        for (String shape : shapeNames) {
            comboBox.addItem(shape);
        }
        ;
        image = new javax.swing.JLabel();
        add = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        shapesTable = new javax.swing.JTable();
        lblInfo = new javax.swing.JLabel();
        delete = new javax.swing.JButton();
        jSeparator1 = new javax.swing.JSeparator();
        clear = new javax.swing.JButton();
        txtDimension1 = new javax.swing.JTextField();
        txtDimension2 = new javax.swing.JTextField();
        txtDimension3 = new javax.swing.JTextField();
        lblDimension1 = new javax.swing.JLabel();
        lblDimension2 = new javax.swing.JLabel();
        lblDimension3 = new javax.swing.JLabel();
        title = new javax.swing.JLabel();
        errorAdd = new javax.swing.JLabel();
        txtUnitPrice = new javax.swing.JTextField();
        lblUnitPrice = new javax.swing.JLabel();
        btnUnitPrice = new javax.swing.JButton();
        errorUnitPrice = new javax.swing.JLabel();
        print = new javax.swing.JButton();
        errorDelete = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        comboBox.setSelectedItem(comboBox);
        comboBox.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                comboBoxItemStateChanged(evt);
            }
        });

        image.setToolTipText("");
        image.setPreferredSize(new java.awt.Dimension(235, 135));
        image.setVerifyInputWhenFocusTarget(false);

        add.setText("Add");
        add.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addActionPerformed(evt);
            }
        });

        shapesTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Shape", "Area", "Cost"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        shapesTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                shapesTableMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(shapesTable);
        if (shapesTable.getColumnModel().getColumnCount() > 0) {
            shapesTable.getColumnModel().getColumn(0).setPreferredWidth(120);
        }

        lblInfo.setText("Click on and hover over a shape for more info");

        delete.setText("Delete");
        delete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteActionPerformed(evt);
            }
        });

        jSeparator1.setOrientation(javax.swing.SwingConstants.VERTICAL);

        clear.setText("Clear");
        clear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearActionPerformed(evt);
            }
        });

        lblDimension1.setText("jLabel1");

        lblDimension2.setText("jLabel1");

        lblDimension3.setText("jLabel1");

        title.setFont(new java.awt.Font("Perpetua Titling MT", 1, 36)); // NOI18N
        title.setText("Tile Price Calculator");

        errorAdd.setForeground(new java.awt.Color(204, 0, 0));

        lblUnitPrice.setText("Unit Price:");

        btnUnitPrice.setText("Update Unit Price");
        btnUnitPrice.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUnitPriceActionPerformed(evt);
            }
        });

        errorUnitPrice.setForeground(new java.awt.Color(204, 0, 0));

        print.setText("Print");
        print.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                printActionPerformed(evt);
            }
        });

        errorDelete.setForeground(new java.awt.Color(204, 0, 0));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(image, javax.swing.GroupLayout.PREFERRED_SIZE, 235, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                            .addGap(39, 39, 39)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(errorAdd, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGroup(layout.createSequentialGroup()
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(lblDimension3)
                                        .addComponent(lblDimension2)
                                        .addComponent(lblDimension1))
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                        .addComponent(txtDimension1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 117, Short.MAX_VALUE)
                                        .addComponent(txtDimension2, javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(txtDimension3, javax.swing.GroupLayout.Alignment.LEADING)))))
                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                            .addGap(91, 91, 91)
                            .addComponent(comboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(18, 18, 18)
                            .addComponent(add))))
                .addGap(54, 54, 54)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 13, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(51, 51, 51)
                        .addComponent(lblInfo))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(30, 30, 30)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 303, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(btnUnitPrice)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(lblUnitPrice)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(txtUnitPrice, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(errorUnitPrice, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(19, 19, 19)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(delete)
                                    .addComponent(clear)
                                    .addComponent(print)))
                            .addComponent(errorDelete, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(17, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(title)
                .addGap(206, 206, 206))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addComponent(title, javax.swing.GroupLayout.PREFERRED_SIZE, 76, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(image, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(comboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(add))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(errorAdd)
                        .addGap(29, 29, 29)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtDimension1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblDimension1))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtDimension2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblDimension2))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtDimension3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblDimension3))
                        .addGap(48, 48, 48))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 369, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(lblInfo)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 354, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(34, 34, 34))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(40, 40, 40)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(txtUnitPrice, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(lblUnitPrice))
                                .addGap(18, 18, 18)
                                .addComponent(btnUnitPrice)
                                .addGap(18, 18, 18)
                                .addComponent(errorUnitPrice)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(errorDelete)
                                .addGap(18, 18, 18)
                                .addComponent(delete)
                                .addGap(18, 18, 18)
                                .addComponent(clear)
                                .addGap(18, 18, 18)
                                .addComponent(print)
                                .addGap(52, 52, 52))))))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Adds a total row to this JTable using values in shapes ArrayList
     */
    private void addTotalRow() {
        double totalArea = 0, totalCost = 0;
        
        //Cycle through each shape and add to totals
        for (Shape shape : shapes) totalArea += shape.getArea();
        for (Shape shape : shapes) totalCost += shape.getCost();

        //add total row to table
        DecimalFormat df2 = new DecimalFormat("0.00");
        DefaultTableModel tableModel = (DefaultTableModel)shapesTable.getModel();
        tableModel.addRow(new Object[]{"Total: ", df2.format(totalArea), df2.format(totalCost)});
    }
    
    /**
     * Empties and refills JTable with values of shapes ArrayList
     */
    private void updateTable() {
        DecimalFormat df2 = new DecimalFormat("0.00");
        
        //create an empty table model to store updated values
        DefaultTableModel tableModel = (DefaultTableModel)shapesTable.getModel();
        tableModel.setRowCount(0);
        
        //add values from shapes to table
        for (Shape shape : shapes) {
            Object[] row = {shape.getClass().getSimpleName(), df2.format(shape.getArea()), df2.format(shape.getCost())};
            tableModel.addRow(row);
        }
        
        //add total row, set table as model
        addTotalRow();
        shapesTable.setModel(tableModel);
    }
    
    /**
     * Makes a certain number of labels and text fields visible
     * @param amountNeeded number of dimensions needed from the user
     */
    public void numOfInputs(int amountNeeded){
        //reset visibility to the same value, on
        txtDimension1.setVisible(true);
        txtDimension2.setVisible(true);
        txtDimension3.setVisible(true);
        lblDimension1.setVisible(true);
        lblDimension2.setVisible(true);
        lblDimension3.setVisible(true);

        //set each dimension textbox and label invisible depending on value of amountNeeded
        if (amountNeeded < 3) {
            txtDimension3.setVisible(false);
            lblDimension3.setVisible(false);
        }
        if (amountNeeded < 2) {
            txtDimension2.setVisible(false);
            lblDimension2.setVisible(false);
        }
        if (amountNeeded < 1) {
            txtDimension1.setVisible(false);
            lblDimension1.setVisible(false);
        }
    }
    
    /**
     * Adds new shape to shapes ArrayList and JTable
     */
    private void addActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addActionPerformed
        errorAdd.setText(""); //reset error message

        //return if no shape selected
        if (comboBox.getSelectedIndex() == -1) {
            errorAdd.setText("You must select a shape in the combo box");
            return;
        }
        
        double oneD = 0, twoD = 0, threeD = 0;

        //check if textfields are full, integer, and bigger than 0
        try {
            if (txtDimension1.isVisible() && txtDimension1 != null) {
                oneD = Double.parseDouble(txtDimension1.getText());
                if (oneD <= 0) throw new NumberFormatException();
            }
            if (txtDimension2.isVisible() && txtDimension2 != null) {
                twoD = Double.parseDouble(txtDimension2.getText());
                if (twoD <= 0) throw new NumberFormatException();                
            }
            if (txtDimension3.isVisible() && txtDimension3 != null) {
                threeD = Double.parseDouble(txtDimension3.getText());
                if (threeD <= 0) throw new NumberFormatException();                
            }
        } catch (NumberFormatException e) {
            errorAdd.setText("All fields must be filled with positive numbers");
            return;
        }
        
        //create new shape depending on selected index, add to shapes ArrayList
        switch (comboBox.getSelectedIndex()) {
            case 0: 
                shapes.add(new Rectangle(oneD, twoD));
                break;
                
            case 1: 
                shapes.add(new Parallelogram(oneD, twoD));
                break;
                
            case 2: 
                shapes.add(new Triangle(oneD, twoD));
                break;
                
            case 3:
                shapes.add(new Circle(oneD));
                break;
                
            case 4:
                shapes.add(new Square(oneD));
                break;
                
            case 5: 
                //check for invalid input that results in non positive area
                try {
                    shapes.add(new Donut(oneD, twoD));                    
                } catch (IOException e) {
                    errorAdd.setText(e.getMessage());
                    return;
                }
                break;
             
            case 6: 
                //check for invalid input that results in non positive area
                try {
                    shapes.add(new XorVennDiagram(oneD, twoD, threeD));
                } catch (IOException e) {
                    errorAdd.setText(e.getMessage());
                    return;
                }                
                break;
                
            case 7:
                shapes.add(new Trapezoid(oneD, twoD, threeD));
                break;
                
            case 8:
                shapes.add(new Ellipse(oneD, twoD));
                break;
                
            default: break;
        }        
        
        //update table and reset textfields
        updateTable();
        txtDimension1.setText("");
        txtDimension2.setText("");
        txtDimension3.setText("");
    }//GEN-LAST:event_addActionPerformed

    /**
     * Changes the image, labels, and text fields each time a new item is selected
     */
    private void comboBoxItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_comboBoxItemStateChanged
        errorAdd.setText(""); //reset error message

        //get selected shape from combo
        int shapeSelected = comboBox.getSelectedIndex();
        if (shapeSelected == -1) return;

        //switch image, labels, textfields depending on selected shape
        switch (shapeSelected) {
            case 0: 
                image.setIcon(new ImageIcon(getClass().getResource("/Rectangle.png"))); 
                numOfInputs(2);
                lblDimension1.setText("Length:");
                lblDimension2.setText("Width:");
                break;
                
            case 1: 
                image.setIcon(new ImageIcon(getClass().getResource("/Parallelogram.png")));
                numOfInputs(2);
                lblDimension1.setText("Length:");
                lblDimension2.setText("Height:");
                break;
                
            case 2: 
                image.setIcon(new ImageIcon(getClass().getResource("/Triangle.png"))); 
                numOfInputs(2);
                lblDimension1.setText("Base:");
                lblDimension2.setText("Height:");
                break;
                
            case 3: 
                image.setIcon(new ImageIcon(getClass().getResource("/Circle.png"))); 
                numOfInputs(1);
                lblDimension1.setText("Radius:");
                break;
                
            case 4: 
                image.setIcon(new ImageIcon(getClass().getResource("/Square.png"))); 
                numOfInputs(1);
                lblDimension1.setText("Side:");
                break;
                
            case 5: 
                image.setIcon(new ImageIcon(getClass().getResource("/Donut.png"))); 
                numOfInputs(2);
                lblDimension1.setText("Exterior Radius:");
                lblDimension2.setText("Interior Radius:");
                break;
             
            case 6: 
                image.setIcon(new ImageIcon(getClass().getResource("/XorVennDiagram.png"))); 
                numOfInputs(3);
                lblDimension1.setText("Center distance:");
                lblDimension2.setText("Radius 1:");
                lblDimension3.setText("Radius 2:");
                break;
                
            case 7: 
                image.setIcon(new ImageIcon(getClass().getResource("/Trapezoid.png"))); 
                numOfInputs(3);
                lblDimension1.setText("Top Base:");
                lblDimension2.setText("Bottom Base:");
                lblDimension3.setText("Height:");
                break;
                
            case 8: 
                image.setIcon(new ImageIcon(getClass().getResource("/Ellipse.png"))); 
                numOfInputs(2);
                lblDimension1.setText("Radius 1:");
                lblDimension2.setText("Radius 2:");
                break;
                
            default: break;
        }
    }//GEN-LAST:event_comboBoxItemStateChanged

    /**
     * Updates unit price to user input
     */
    private void btnUnitPriceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUnitPriceActionPerformed
        errorUnitPrice.setText(""); //reset error message

        //sets unit price of Shape class to number entered by user in text field
        try {
            //checks if input is a number and positive
            if (Double.parseDouble(txtUnitPrice.getText()) > 0) {
                Shape.setUnitPrice(Double.parseDouble(txtUnitPrice.getText()));
            } else {
                throw (new NumberFormatException());
            }
        } catch (NumberFormatException e) {
            errorUnitPrice.setText("Enter a positive number");
        }
        
        updateTable();
    }//GEN-LAST:event_btnUnitPriceActionPerformed

    /**
     * Empties table, shapes ArrayList, error labels, Shape unit price
     */
    private void clearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearActionPerformed
        //label clearing
        errorDelete.setText("");
        errorUnitPrice.setText("");
        
        //Table clearing
        DefaultTableModel tableModel = (DefaultTableModel)shapesTable.getModel();
        tableModel.setRowCount(0);
        shapesTable.setModel(tableModel);
        
        //array clearing
        shapes.clear();
        //Shape unit price reset
        Shape.setUnitPrice(0);
        
        //adds total row back on table
        addTotalRow();
    }//GEN-LAST:event_clearActionPerformed

    /**
     * Removes selected rows on this JTable from shapes ArrayList
     */
    private void deleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteActionPerformed
        errorDelete.setText(""); //reset error message
        ArrayList<Shape> updatedShapes = new ArrayList<Shape>(); //keeps track of not selected shapes

        //remove selected row(s) from from array
        int[] rowsToRemove = shapesTable.getSelectedRows();
        boolean shouldRemove = false;

        //if row selected includes total        
        for (int rowNum : rowsToRemove) {
            if (rowNum == shapes.size()) {
                errorDelete.setText("Cannot delete Total");
            }
        }
        
        //loop through all rows to check if it matches any row in row to Remove
        for (int rowNum = 0; rowNum < shapes.size(); rowNum++) {
            for (int x : rowsToRemove) {
                if (rowNum == x) {
                    shouldRemove = true; //if any of selected rows match current, remove
                    break;
                }
            }
            //add to array if not selected
            if (!shouldRemove) updatedShapes.add(shapes.get(rowNum));
        }

        //update table and array with rows removed from array
        shapes = updatedShapes;        
        updateTable();
    }//GEN-LAST:event_deleteActionPerformed

    /**
     * Displays information from toString method of shape selected by user in tool tip
     */
    private void shapesTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_shapesTableMouseClicked
        //if no row is selected
        if (shapesTable.getSelectedRow() == -1) {
            return;    
        } else {
            //handle if total row is selected
            if (shapesTable.getSelectedRow() == shapes.size()) return;
            //show all entered info in tool tip of selected row
            shapesTable.setToolTipText(shapes.toString());      
        }
    }//GEN-LAST:event_shapesTableMouseClicked

    /**
     * Opens jDialog window and passes current shapes array
     */
    private void printActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_printActionPerformed
        new Checkout(this, true, shapes).setVisible(true);
    }//GEN-LAST:event_printActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(TileCalculator.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(TileCalculator.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(TileCalculator.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(TileCalculator.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new TileCalculator().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton add;
    private javax.swing.JButton btnUnitPrice;
    private javax.swing.JButton clear;
    private javax.swing.JComboBox<String> comboBox;
    private javax.swing.JButton delete;
    private javax.swing.JLabel errorAdd;
    private javax.swing.JLabel errorDelete;
    private javax.swing.JLabel errorUnitPrice;
    private javax.swing.JLabel image;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JLabel lblDimension1;
    private javax.swing.JLabel lblDimension2;
    private javax.swing.JLabel lblDimension3;
    private javax.swing.JLabel lblInfo;
    private javax.swing.JLabel lblUnitPrice;
    private javax.swing.JButton print;
    private javax.swing.JTable shapesTable;
    private javax.swing.JLabel title;
    private javax.swing.JTextField txtDimension1;
    private javax.swing.JTextField txtDimension2;
    private javax.swing.JTextField txtDimension3;
    private javax.swing.JTextField txtUnitPrice;
    // End of variables declaration//GEN-END:variables
}
