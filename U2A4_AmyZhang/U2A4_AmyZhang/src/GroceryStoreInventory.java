
import java.awt.Color;
import java.io.*;
import javax.swing.ListSelectionModel;
import javax.swing.table.*;
import java.util.*;
import java.util.stream.*;

/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */

/**
 * A GUI to add, save, and query items in an inventory from a grocery store that is stored in a file
 * @author Amy Zhang
 */
public class GroceryStoreInventory extends javax.swing.JFrame {

    ArrayList<Category> inventory = new ArrayList<>(); //Stores all items in the store inside categories
    final String[][] filter = { //Stores the numbers to filter each property by
        {"0-40", "40-80", "80+"},
        {"0-40", "40-80", "80+"},
        {"0-4", "4-8", "8+"},
        {"0-20", "20-40", "40+"},
        {"0-5", "5-10", "10+"},
        {"0-15", "15-30", "30+"},
        {"0-5", "5-10", "10+"}
    };
    
    /**
     * Creates new form GroceryStoreInventory
     */
    public GroceryStoreInventory() {
        try {
            BufferedReader reader = new BufferedReader(new FileReader("inventory.csv"));
            String line;
            
            //reads each line, creates an item each time
            while ((line = reader.readLine()) != null) {
                String[] part = line.split(",");
                //Creates a new Category if the category is not in ArrayList inventory
                if (inventory.stream()
                      .filter(i -> i.getCategoryName().equals(part[2]))
                      .collect(Collectors.toList()).isEmpty()) {
                    inventory.add(new Category(part[2]));
                }
                //adds item into the category based on information in the line
                inventory.stream()
                  .filter(i -> i.getCategoryName().equals(part[2]))
                  .collect(Collectors.toList())
                  .get(0)
                  .add(part);
            }
            reader.close();
        } catch (IOException ex) {
            ex.printStackTrace();
        }
        
        initComponents();
        table.setSelectionMode(ListSelectionModel.SINGLE_SELECTION); //only one row can be selected at a time
        updateTable(); //displays items in table

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        tabbedPane = new javax.swing.JTabbedPane();
        panelAddItem = new javax.swing.JPanel();
        txtName = new javax.swing.JTextField();
        category = new javax.swing.JComboBox<>();
        skuNum = new javax.swing.JTextField();
        skuLabel2 = new javax.swing.JLabel();
        nameLabel = new javax.swing.JLabel();
        quantityLabel = new javax.swing.JLabel();
        minQuantityLabel = new javax.swing.JLabel();
        txtVendorPrice = new javax.swing.JTextField();
        vendorPriceLabel = new javax.swing.JLabel();
        markupPercentLabel = new javax.swing.JLabel();
        txtMarkupPercent = new javax.swing.JTextField();
        currentDiscountLabel = new javax.swing.JLabel();
        txtCurrentDiscount = new javax.swing.JTextField();
        addItem = new javax.swing.JButton();
        feedbackItem = new javax.swing.JLabel();
        spinnerQuantity = new javax.swing.JSpinner();
        spinnerMinQuantity = new javax.swing.JSpinner();
        skuLabel = new javax.swing.JLabel();
        panelSearch = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        txtSearch = new javax.swing.JTextField();
        jScrollPane3 = new javax.swing.JScrollPane();
        filterList = new javax.swing.JList<>();
        filterByLabel = new javax.swing.JLabel();
        check1 = new javax.swing.JCheckBox();
        check2 = new javax.swing.JCheckBox();
        check3 = new javax.swing.JCheckBox();
        panelAddCategory = new javax.swing.JPanel();
        nameLabel2 = new javax.swing.JLabel();
        txtCategoryName = new javax.swing.JTextField();
        addCategory = new javax.swing.JButton();
        feedbackCat = new javax.swing.JLabel();
        currentCategoriesLabel = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        currentCategories = new javax.swing.JTextArea();
        jScrollPane1 = new javax.swing.JScrollPane();
        table = new javax.swing.JTable();
        infoBarName = new javax.swing.JTextField();
        infoBarQuantity = new javax.swing.JTextField();
        infoBarSku = new javax.swing.JTextField();
        infoBarCurrentPrice = new javax.swing.JTextField();
        infoBarMinQuantity = new javax.swing.JTextField();
        infoBarVendorPrice = new javax.swing.JTextField();
        infoBarRegularPrice = new javax.swing.JTextField();
        infoLabelQuantity = new javax.swing.JLabel();
        infoLabelSku = new javax.swing.JLabel();
        infoLabelName = new javax.swing.JLabel();
        infoLabelMinQuantity = new javax.swing.JLabel();
        infoLabelVendorPrice = new javax.swing.JLabel();
        infoLabelRegularPrice = new javax.swing.JLabel();
        infoLabelCurrentPrice = new javax.swing.JLabel();
        infoBarMarkup = new javax.swing.JTextField();
        infoLabelMarkup = new javax.swing.JLabel();
        infoLabelDiscount = new javax.swing.JLabel();
        infoBarDiscount = new javax.swing.JTextField();
        jSeparator1 = new javax.swing.JSeparator();
        infoBarCategory = new javax.swing.JTextField();
        infoLabelCategory = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Grocery Store Inventory");

        tabbedPane.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                tabbedPaneStateChanged(evt);
            }
        });

        category.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        category.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                categoryItemStateChanged(evt);
            }
        });

        skuNum.setEditable(false);
        skuNum.setFocusable(false);

        skuLabel2.setText("-");

        nameLabel.setText("Name:");

        quantityLabel.setText("Qty:");

        minQuantityLabel.setText("Min Qty:");

        vendorPriceLabel.setText("Vender Price:");

        markupPercentLabel.setText("Markup %:");

        currentDiscountLabel.setText("Current Discount %:");

        addItem.setText("Add");
        addItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addItemActionPerformed(evt);
            }
        });

        feedbackItem.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);

        skuLabel.setText("SKU:");

        javax.swing.GroupLayout panelAddItemLayout = new javax.swing.GroupLayout(panelAddItem);
        panelAddItem.setLayout(panelAddItemLayout);
        panelAddItemLayout.setHorizontalGroup(
            panelAddItemLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelAddItemLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(addItem)
                .addGap(115, 115, 115))
            .addGroup(panelAddItemLayout.createSequentialGroup()
                .addGap(28, 28, 28)
                .addGroup(panelAddItemLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panelAddItemLayout.createSequentialGroup()
                        .addComponent(quantityLabel)
                        .addGap(18, 18, 18)
                        .addComponent(spinnerQuantity, javax.swing.GroupLayout.PREFERRED_SIZE, 66, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(minQuantityLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(spinnerMinQuantity, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(panelAddItemLayout.createSequentialGroup()
                        .addGroup(panelAddItemLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(currentDiscountLabel)
                            .addComponent(markupPercentLabel)
                            .addComponent(vendorPriceLabel))
                        .addGap(43, 43, 43)
                        .addGroup(panelAddItemLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtVendorPrice, javax.swing.GroupLayout.PREFERRED_SIZE, 94, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtMarkupPercent, javax.swing.GroupLayout.PREFERRED_SIZE, 94, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtCurrentDiscount, javax.swing.GroupLayout.PREFERRED_SIZE, 94, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(panelAddItemLayout.createSequentialGroup()
                        .addGap(7, 7, 7)
                        .addGroup(panelAddItemLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(panelAddItemLayout.createSequentialGroup()
                                .addComponent(skuLabel)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(category, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(skuLabel2)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(skuNum, javax.swing.GroupLayout.PREFERRED_SIZE, 56, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(8, 8, 8))
                            .addGroup(panelAddItemLayout.createSequentialGroup()
                                .addComponent(nameLabel)
                                .addGap(18, 18, 18)
                                .addComponent(txtName, javax.swing.GroupLayout.PREFERRED_SIZE, 152, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addContainerGap(10, Short.MAX_VALUE))
            .addGroup(panelAddItemLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(feedbackItem, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        panelAddItemLayout.setVerticalGroup(
            panelAddItemLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelAddItemLayout.createSequentialGroup()
                .addGap(44, 44, 44)
                .addGroup(panelAddItemLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(category, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(skuNum, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(skuLabel2)
                    .addComponent(skuLabel))
                .addGap(18, 18, 18)
                .addGroup(panelAddItemLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(nameLabel))
                .addGap(27, 27, 27)
                .addGroup(panelAddItemLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(quantityLabel)
                    .addComponent(minQuantityLabel)
                    .addComponent(spinnerQuantity, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(spinnerMinQuantity, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(34, 34, 34)
                .addGroup(panelAddItemLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtVendorPrice, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(vendorPriceLabel))
                .addGap(27, 27, 27)
                .addGroup(panelAddItemLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtMarkupPercent, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(markupPercentLabel))
                .addGap(26, 26, 26)
                .addGroup(panelAddItemLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtCurrentDiscount, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(currentDiscountLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 68, Short.MAX_VALUE)
                .addComponent(addItem)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(feedbackItem, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(16, 16, 16))
        );

        tabbedPane.addTab("Add Item", panelAddItem);

        jLabel3.setText("Type in the Name or SKU:");

        txtSearch.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtSearchKeyReleased(evt);
            }
        });

        filterList.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { "Quantity", "Min Qty", "Vendor Price", "Markup %", "Regular Price", "Current Discount", "Current Price" };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        filterList.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_INTERVAL_SELECTION);
        filterList.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                filterListValueChanged(evt);
            }
        });
        jScrollPane3.setViewportView(filterList);

        filterByLabel.setText("Filter by:");

        check1.setText("0-5");
        check1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                check1ActionPerformed(evt);
            }
        });

        check2.setText("6-10");
        check2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                check2ActionPerformed(evt);
            }
        });

        check3.setText("11+");
        check3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                check3ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout panelSearchLayout = new javax.swing.GroupLayout(panelSearch);
        panelSearch.setLayout(panelSearchLayout);
        panelSearchLayout.setHorizontalGroup(
            panelSearchLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelSearchLayout.createSequentialGroup()
                .addGroup(panelSearchLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panelSearchLayout.createSequentialGroup()
                        .addGap(63, 63, 63)
                        .addComponent(jLabel3))
                    .addGroup(panelSearchLayout.createSequentialGroup()
                        .addGap(36, 36, 36)
                        .addGroup(panelSearchLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(filterByLabel)
                            .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(panelSearchLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(check1)
                            .addComponent(check2)
                            .addComponent(check3)))
                    .addGroup(panelSearchLayout.createSequentialGroup()
                        .addGap(49, 49, 49)
                        .addComponent(txtSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 195, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(61, Short.MAX_VALUE))
        );
        panelSearchLayout.setVerticalGroup(
            panelSearchLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelSearchLayout.createSequentialGroup()
                .addGap(61, 61, 61)
                .addComponent(jLabel3)
                .addGap(18, 18, 18)
                .addComponent(txtSearch, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 73, Short.MAX_VALUE)
                .addComponent(filterByLabel)
                .addGap(18, 18, 18)
                .addGroup(panelSearchLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelSearchLayout.createSequentialGroup()
                        .addComponent(check1)
                        .addGap(34, 34, 34)
                        .addComponent(check2)
                        .addGap(34, 34, 34)
                        .addComponent(check3)
                        .addGap(20, 20, 20)))
                .addGap(74, 74, 74))
        );

        tabbedPane.addTab("Search Inventory", panelSearch);

        nameLabel2.setText("Name:");

        addCategory.setText("Add");
        addCategory.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addCategoryActionPerformed(evt);
            }
        });

        feedbackCat.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);

        currentCategoriesLabel.setText("Current Categories");

        currentCategories.setEditable(false);
        currentCategories.setColumns(5);
        currentCategories.setRows(5);
        currentCategories.setWrapStyleWord(true);
        currentCategories.setFocusable(false);
        jScrollPane2.setViewportView(currentCategories);

        javax.swing.GroupLayout panelAddCategoryLayout = new javax.swing.GroupLayout(panelAddCategory);
        panelAddCategory.setLayout(panelAddCategoryLayout);
        panelAddCategoryLayout.setHorizontalGroup(
            panelAddCategoryLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelAddCategoryLayout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(nameLabel2)
                .addGap(18, 18, 18)
                .addComponent(txtCategoryName, javax.swing.GroupLayout.PREFERRED_SIZE, 152, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(56, 56, 56))
            .addGroup(panelAddCategoryLayout.createSequentialGroup()
                .addGap(37, 37, 37)
                .addGroup(panelAddCategoryLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panelAddCategoryLayout.createSequentialGroup()
                        .addComponent(currentCategoriesLabel)
                        .addGap(18, 18, 18)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(feedbackCat, javax.swing.GroupLayout.PREFERRED_SIZE, 245, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(23, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelAddCategoryLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(addCategory)
                .addGap(118, 118, 118))
        );
        panelAddCategoryLayout.setVerticalGroup(
            panelAddCategoryLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelAddCategoryLayout.createSequentialGroup()
                .addGap(92, 92, 92)
                .addGroup(panelAddCategoryLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtCategoryName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(nameLabel2))
                .addGap(42, 42, 42)
                .addComponent(addCategory)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(feedbackCat)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 117, Short.MAX_VALUE)
                .addGroup(panelAddCategoryLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 144, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(currentCategoriesLabel))
                .addGap(36, 36, 36))
        );

        tabbedPane.addTab("Add Category", panelAddCategory);

        table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "SKU", "Name", "Qty", "Min Qty", "Vendor Price", "Regular Price", "Current Price"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        table.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tableMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(table);
        if (table.getColumnModel().getColumnCount() > 0) {
            table.getColumnModel().getColumn(0).setPreferredWidth(30);
            table.getColumnModel().getColumn(2).setPreferredWidth(10);
            table.getColumnModel().getColumn(3).setPreferredWidth(10);
            table.getColumnModel().getColumn(4).setPreferredWidth(30);
            table.getColumnModel().getColumn(5).setPreferredWidth(30);
            table.getColumnModel().getColumn(6).setPreferredWidth(30);
        }

        infoBarName.setEditable(false);
        infoBarName.setFocusable(false);

        infoBarQuantity.setEditable(false);
        infoBarQuantity.setFocusable(false);

        infoBarSku.setEditable(false);
        infoBarSku.setFocusable(false);

        infoBarCurrentPrice.setEditable(false);
        infoBarCurrentPrice.setFocusable(false);

        infoBarMinQuantity.setEditable(false);
        infoBarMinQuantity.setFocusable(false);

        infoBarVendorPrice.setEditable(false);
        infoBarVendorPrice.setFocusable(false);

        infoBarRegularPrice.setEditable(false);
        infoBarRegularPrice.setFocusable(false);

        infoLabelQuantity.setFont(new java.awt.Font("Segoe UI", 0, 10)); // NOI18N
        infoLabelQuantity.setText("Quantity");

        infoLabelSku.setFont(new java.awt.Font("Segoe UI", 0, 10)); // NOI18N
        infoLabelSku.setText("Stock Keeping Unit");

        infoLabelName.setFont(new java.awt.Font("Segoe UI", 0, 10)); // NOI18N
        infoLabelName.setText("Name");

        infoLabelMinQuantity.setFont(new java.awt.Font("Segoe UI", 0, 10)); // NOI18N
        infoLabelMinQuantity.setText("Min Quantity");

        infoLabelVendorPrice.setFont(new java.awt.Font("Segoe UI", 0, 10)); // NOI18N
        infoLabelVendorPrice.setText("Vendor Price");

        infoLabelRegularPrice.setFont(new java.awt.Font("Segoe UI", 0, 10)); // NOI18N
        infoLabelRegularPrice.setText("Regular Price");

        infoLabelCurrentPrice.setFont(new java.awt.Font("Segoe UI", 0, 10)); // NOI18N
        infoLabelCurrentPrice.setText("Current Price");

        infoBarMarkup.setEditable(false);
        infoBarMarkup.setFocusable(false);

        infoLabelMarkup.setFont(new java.awt.Font("Segoe UI", 0, 10)); // NOI18N
        infoLabelMarkup.setText("Markup %");

        infoLabelDiscount.setFont(new java.awt.Font("Segoe UI", 0, 10)); // NOI18N
        infoLabelDiscount.setText("Discount %");

        infoBarDiscount.setEditable(false);
        infoBarDiscount.setFocusable(false);

        jSeparator1.setOrientation(javax.swing.SwingConstants.VERTICAL);

        infoBarCategory.setEditable(false);
        infoBarCategory.setFocusable(false);

        infoLabelCategory.setFont(new java.awt.Font("Segoe UI", 0, 10)); // NOI18N
        infoLabelCategory.setText("Category");

        jLabel1.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        jLabel1.setText("Inventory");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(tabbedPane, javax.swing.GroupLayout.PREFERRED_SIZE, 305, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 12, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addComponent(infoLabelSku, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(infoBarSku))
                                .addGap(4, 4, 4)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(infoBarName, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(43, 43, 43)
                                        .addComponent(infoLabelName)))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(infoBarCategory, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(infoBarQuantity, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                        .addComponent(infoLabelCategory)
                                        .addGap(33, 33, 33)
                                        .addComponent(infoLabelQuantity)))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(infoLabelMinQuantity)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(6, 6, 6)
                                        .addComponent(infoBarMinQuantity, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(infoBarVendorPrice, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(infoLabelVendorPrice))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(infoBarMarkup, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(infoLabelMarkup))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(infoBarRegularPrice, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(infoLabelRegularPrice))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(infoBarDiscount, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(infoBarCurrentPrice, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(infoLabelDiscount)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(infoLabelCurrentPrice))))
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 712, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel1)
                        .addGap(305, 305, 305))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(tabbedPane, javax.swing.GroupLayout.Alignment.TRAILING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jSeparator1))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(8, 8, 8)
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 449, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(infoLabelName)
                                    .addComponent(infoLabelSku))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(infoBarSku, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(infoBarName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(infoLabelQuantity)
                                        .addComponent(infoLabelMinQuantity)
                                        .addComponent(infoLabelVendorPrice)
                                        .addComponent(infoLabelCategory))
                                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                        .addGap(5, 5, 5)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(infoLabelDiscount, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                                .addComponent(infoLabelMarkup)
                                                .addComponent(infoLabelRegularPrice)
                                                .addComponent(infoLabelCurrentPrice)))))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(infoBarQuantity, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(infoBarMinQuantity, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(infoBarVendorPrice, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(infoBarMarkup, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(infoBarRegularPrice, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(infoBarDiscount, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(infoBarCurrentPrice, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(infoBarCategory, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))))
                .addGap(17, 17, 17))
        );

        tabbedPane.getAccessibleContext().setAccessibleName("tab");

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Rewrites inventory.csv using the values in ArrayList inventory
     */
    public void updateFile() {
        try {
            BufferedWriter writer = new BufferedWriter(new FileWriter("inventory.csv"));
            //writes each element in inventory using toString
            for (Category category : inventory) {
                writer.write(category.toString()); 
            }
            writer.close();
        } catch (IOException ex) {
            ex.printStackTrace();
        }
    }
    
    /**
     * Sets table using the values in inventory.csv
     */
    public void updateTable() {
        try {
            BufferedReader reader = new BufferedReader(new FileReader("inventory.csv"));
            String line; //stores each line in file
            DefaultTableModel model = (DefaultTableModel)table.getModel();
            
            model.setRowCount(0); //clears all items in table model
            //adds each line from inventry.csv into table 
            while ((line = reader.readLine()) != null) {
                String[] part = line.split(",");
                model.addRow(new String[] {part[0], part[1], part[3], part[4], part[5], part[7], part[9]});
            }
            reader.close();
        } catch (IOException ex) {
            ex.printStackTrace();
        }        
    }
    
    /**
     * Sets text area currentCategories with elements in ArrayList inventory  
     */
    public void updateCurrentCategories() {
        currentCategories.setText("");
        //adds all category names into text area
        inventory.stream().forEach(i -> currentCategories.append(i.getCategoryName() + "\n"));
    }
    
    /**
     * Checks if an item meets the filters selected
     * @param item The item to check
     * @return true if the item meets the filters, false if it does not
     */
    public boolean filter(Item item) {
        if (filterList.getSelectedIndex() == -1) return true; //No index is selected
        if (!check1.isSelected() && !check2.isSelected() && !check3.isSelected()) return true; // No range is selected
        
        //checks which property is selected to filter
        double property = switch (filterList.getSelectedIndex()) {
            case 0 -> item.getQuantity();
            case 1 -> item.getMinimumQuantity();
            case 2 -> item.getVendorPrice();
            case 3 -> item.getMarkupPercentage();
            case 4 -> item.getRegularPrice();
            case 5 -> item.getCurrentDiscount();
            case 6 -> item.getCurrentPrice();
            default -> -1;
        };
        
        String[] range; //stores the string of number(s) that make up the filter range
        
        range = filter[filterList.getSelectedIndex()][0].split("-");
        if (check1.isSelected() && Double.valueOf(range[0]) <= property && property < Double.valueOf(range[1])) return true;
        
        range = filter[filterList.getSelectedIndex()][1].split("-");
        if (check2.isSelected() && Double.valueOf(range[0]) <= property && property < Double.valueOf(range[1])) return true;
        
        range = filter[filterList.getSelectedIndex()][2].split("\\+");
        if (check3.isSelected() && Double.valueOf(range[0]) <= property) return true;

        return false;
    }
    
    
    private void addItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addItemActionPerformed
        String name;
        int quantity, minQuantity;
        double vendorPrice, markupPercent, currentDiscount;
        
        feedbackItem.setForeground(Color.red); //Stays red if method returns before successfully adding item
        
        //No category selected
        if (category.getSelectedIndex() == -1){
            feedbackItem.setText("Select a category");
            return;
        }
        //Checks for any empty text fields
        if (txtName.getText().isBlank() || txtVendorPrice.getText().isBlank() || txtMarkupPercent.getText().isBlank() || txtCurrentDiscount.getText().isBlank()) {
            feedbackItem.setText("Please fill in all fields");
            return;
        }
        
        //Checks for if the name is longer than 20 characters
        if ((name = txtName.getText()).length() > 20) {
            feedbackItem.setText("Name is longer than 20 characters");
            return;
        }
        //Checks if the name is already used by another item
        if (!(inventory.stream()
                      .filter(i -> i.getItem(name) != null))
                      .collect(Collectors.toList()).isEmpty()) {
            feedbackItem.setText("Another item has the same name");
            return;
        }
        
        //Checks that the quantities are not negative
        if ((quantity = Integer.parseInt(String.valueOf(spinnerQuantity.getValue()))) < 0) {
            feedbackItem.setText("Quantity is negative");
            return;
        }
        if ((minQuantity = Integer.parseInt(String.valueOf(spinnerMinQuantity.getValue()))) < 0) {
            feedbackItem.setText("Minimum quantity is negative");
            return;
        }
        //Checks if the quantity is not bigger than the minimum quantity
        if (quantity <= minQuantity) {
            feedbackItem.setText("Minimum quantity must be smaller than quantity");
            return;
        }
        
        //Checks if vendor price is a number, not negative, and has 2 decimal places
        try {
            if ((vendorPrice = Double.parseDouble(txtVendorPrice.getText())) < 0) {
                feedbackItem.setText("Vendor Price is not positive");
                return;
            }
            //checks if has two decimal places
            int decimalIndex = txtVendorPrice.getText().indexOf('.');
            if (decimalIndex == -1 || decimalIndex != txtVendorPrice.getText().length()-3) {
                feedbackItem.setText("Vendor Price must have two decimal places");
                return;
            }
        } catch (NumberFormatException e) {
            feedbackItem.setText("Vendor Price is not a number");
            return;
        }
        
        //Checks if the markup percentage is a number, and between 0 and 100
        try {
            if ((markupPercent = Double.parseDouble(txtMarkupPercent.getText())) < 0 || markupPercent > 100) {
                feedbackItem.setText("Markup Percentage is not a value between 0-100");
                return;
            }
        } catch (NumberFormatException e) {
            feedbackItem.setText("Markup Percentage is not a number");
            return;
        }
        
        //Checks if the current discount is a number, and between 0 and 100        
        try {
            if ((currentDiscount = Double.parseDouble(txtCurrentDiscount.getText())) < 0 || currentDiscount > 100) {
                feedbackItem.setText("Current Discount is not a value between 0-100");
                return;
            }
        } catch (NumberFormatException e) {
            feedbackItem.setText("Current Discount is not a number");
            return;
        }
        
        //Adds a new item 
        try {
            inventory.get(category.getSelectedIndex()).add(name, quantity, minQuantity, vendorPrice, markupPercent, currentDiscount);
        } catch (IOException ex) {
            feedbackItem.setText(ex.getMessage()); //If the current price is negative
            return;
        }
        
        //If no previous if st1atements return, a new item is added
        feedbackItem.setText("Successfully added");
        feedbackItem.setForeground(Color.green);
        
        updateFile();
        updateTable();
    }//GEN-LAST:event_addItemActionPerformed

    private void tabbedPaneStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_tabbedPaneStateChanged
        switch (tabbedPane.getSelectedIndex()) {
            case 0: //swtiched to add item panel
                //rewrites all items into combo box
                category.removeAllItems();
                inventory.stream().forEach(i -> category.addItem(i.getSkuLetters()));
                updateTable(); //rewrites table
                break;
                
            case 1: //switched to search panel
                txtSearch.setText("");
                break;
                
            case 2: //switched to add category panel
                updateCurrentCategories();
                updateTable(); 
                break;
                
            default:
                break;
        } 
    }//GEN-LAST:event_tabbedPaneStateChanged

    private void categoryItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_categoryItemStateChanged
        //adds Stock Keeping Unit numbers depending on the category selected
        if (category.getSelectedIndex() != -1) {
            try {   
                skuNum.setText(inventory.get(category.getSelectedIndex()).getSkuNums());
            } catch (IOException ex) {
                feedbackItem.setText(ex.getMessage());//If the item limit for the category is exceeded
            }
        }
    }//GEN-LAST:event_categoryItemStateChanged

    private void addCategoryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addCategoryActionPerformed
        String categoryName;
        feedbackCat.setForeground(Color.red); //Stays red if method returns before successfully adding item
        
        //Checks if the textfield is empty
        if ((categoryName = txtCategoryName.getText().toUpperCase()).isBlank()) {
            feedbackCat.setText("Please fill in the textfield");
            return;
        }
        
        //Checks if another Category exists with same SKU letters
        for (Category category : inventory) {
            if (category.getSkuLetters().equals(categoryName.substring(0,3))){
                feedbackCat.setText("Another category has the same SKU letters");
                return;
            }    
        }
        
        //Adds new Category to inventory ArrayList
        inventory.add(new Category(categoryName));              
        feedbackCat.setText("Successfully added");
        feedbackCat.setForeground(Color.green);
        updateCurrentCategories();
    }//GEN-LAST:event_addCategoryActionPerformed

    private void tableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tableMouseClicked
        int row = table.getSelectedRow();
        //Exits if no row is selected
        if (row == -1) return;
        //Displays all info of selected row in textfield
        Item item = inventory.stream()
                .filter(c -> c.getSkuLetters().equals(String.valueOf(table.getValueAt(row, 0)).substring(0,3)))
                .findFirst()
                .get()
                .getItem(String.valueOf(table.getValueAt(row, 1)));
        
        //Sets selected item info into infoBar
        infoBarSku.setText(item.getSku());
        infoBarName.setText(item.getName());
        infoBarCategory.setText(item.getCategory());
        infoBarQuantity.setText(String.valueOf(item.getQuantity()));
        infoBarMinQuantity.setText(String.valueOf(item.getMinimumQuantity()));
        infoBarVendorPrice.setText(String.valueOf(item.getVendorPrice()));
        infoBarMarkup.setText(String.valueOf(item.getMarkupPercentage()));
        infoBarRegularPrice.setText(String.valueOf(item.getRegularPrice()));
        infoBarDiscount.setText(String.valueOf(item.getCurrentDiscount()));
        infoBarCurrentPrice.setText(String.valueOf(item.getCurrentPrice()));
    }//GEN-LAST:event_tableMouseClicked

    private void txtSearchKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtSearchKeyReleased
        String search = txtSearch.getText().toLowerCase(); //gets text from textfield in lowercase
        DefaultTableModel model = (DefaultTableModel) table.getModel();
        model.setRowCount(0); //removes all items in model

        //loops through all items in inventory
        for (Category c : inventory) {
            for (int i = 0; i < c.size(); i++) {
                Item item = c.getItem(i);
                //item SKU or name contains text in textfield AND item matches filter (if exists)
                if ((item.getName().toLowerCase().contains(search) || item.getSku().toLowerCase().contains(search)) && filter(item)) {
                    //adds row in model if all conditions above are true
                    model.addRow(new Object[]{item.getSku(), item.getName(), item.getQuantity(), item.getMinimumQuantity(), item.getVendorPrice(), item.getCurrentPrice(), item.getRegularPrice()});
                }
            }
        }
        table.setModel(model); //sets table to model data
    }//GEN-LAST:event_txtSearchKeyReleased

    private void filterListValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_filterListValueChanged
        if (filterList.getSelectedIndex() == -1) {
            return;
        }
        //Changes text on each checkbox depending on selected index
        check1.setText(filter[filterList.getSelectedIndex()][0]);
        check2.setText(filter[filterList.getSelectedIndex()][1]);
        check3.setText(filter[filterList.getSelectedIndex()][2]);
        
        txtSearchKeyReleased(null); //updates table with the filters on/off
    }//GEN-LAST:event_filterListValueChanged

    private void check1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_check1ActionPerformed
        txtSearchKeyReleased(null); //updates table with the filters on/off
    }//GEN-LAST:event_check1ActionPerformed

    private void check2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_check2ActionPerformed
        txtSearchKeyReleased(null); //updates table with the filters on/off
    }//GEN-LAST:event_check2ActionPerformed

    private void check3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_check3ActionPerformed
        txtSearchKeyReleased(null); //updates table with the filters on/off
    }//GEN-LAST:event_check3ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(GroceryStoreInventory.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(GroceryStoreInventory.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(GroceryStoreInventory.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(GroceryStoreInventory.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new GroceryStoreInventory().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addCategory;
    private javax.swing.JButton addItem;
    private javax.swing.JComboBox<String> category;
    private javax.swing.JCheckBox check1;
    private javax.swing.JCheckBox check2;
    private javax.swing.JCheckBox check3;
    private javax.swing.JTextArea currentCategories;
    private javax.swing.JLabel currentCategoriesLabel;
    private javax.swing.JLabel currentDiscountLabel;
    private javax.swing.JLabel feedbackCat;
    private javax.swing.JLabel feedbackItem;
    private javax.swing.JLabel filterByLabel;
    private javax.swing.JList<String> filterList;
    private javax.swing.JTextField infoBarCategory;
    private javax.swing.JTextField infoBarCurrentPrice;
    private javax.swing.JTextField infoBarDiscount;
    private javax.swing.JTextField infoBarMarkup;
    private javax.swing.JTextField infoBarMinQuantity;
    private javax.swing.JTextField infoBarName;
    private javax.swing.JTextField infoBarQuantity;
    private javax.swing.JTextField infoBarRegularPrice;
    private javax.swing.JTextField infoBarSku;
    private javax.swing.JTextField infoBarVendorPrice;
    private javax.swing.JLabel infoLabelCategory;
    private javax.swing.JLabel infoLabelCurrentPrice;
    private javax.swing.JLabel infoLabelDiscount;
    private javax.swing.JLabel infoLabelMarkup;
    private javax.swing.JLabel infoLabelMinQuantity;
    private javax.swing.JLabel infoLabelName;
    private javax.swing.JLabel infoLabelQuantity;
    private javax.swing.JLabel infoLabelRegularPrice;
    private javax.swing.JLabel infoLabelSku;
    private javax.swing.JLabel infoLabelVendorPrice;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JLabel markupPercentLabel;
    private javax.swing.JLabel minQuantityLabel;
    private javax.swing.JLabel nameLabel;
    private javax.swing.JLabel nameLabel2;
    private javax.swing.JPanel panelAddCategory;
    private javax.swing.JPanel panelAddItem;
    private javax.swing.JPanel panelSearch;
    private javax.swing.JLabel quantityLabel;
    private javax.swing.JLabel skuLabel;
    private javax.swing.JLabel skuLabel2;
    private javax.swing.JTextField skuNum;
    private javax.swing.JSpinner spinnerMinQuantity;
    private javax.swing.JSpinner spinnerQuantity;
    private javax.swing.JTabbedPane tabbedPane;
    private javax.swing.JTable table;
    private javax.swing.JTextField txtCategoryName;
    private javax.swing.JTextField txtCurrentDiscount;
    private javax.swing.JTextField txtMarkupPercent;
    private javax.swing.JTextField txtName;
    private javax.swing.JTextField txtSearch;
    private javax.swing.JTextField txtVendorPrice;
    private javax.swing.JLabel vendorPriceLabel;
    // End of variables declaration//GEN-END:variables
}
