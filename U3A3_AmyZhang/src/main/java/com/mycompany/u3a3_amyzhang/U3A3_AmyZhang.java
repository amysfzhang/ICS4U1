package com.mycompany.u3a3_amyzhang;

/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
import java.util.*;
import java.io.*;

/**
 *
 * @author Amy Zhang
 */
public class U3A3_AmyZhang extends javax.swing.JFrame {

    private int[] referenceList; //Contains the reference numbers of BookList.txt
    private ArrayList<String> books = new ArrayList<String>(); //Contains the titles of the books in the same order as referenceList
    
    /**
     * Creates new form BooksView
     */
    public U3A3_AmyZhang() {
        initComponents();
        
        ArrayList<Integer> referenceNums = new ArrayList<Integer>(); //temporarily storing reference nums in ArrayList
        boolean isNum = true; //alternates between a line with reference number and title

        // Reads file "BookList.txt" in project folder
        try (BufferedReader br = new BufferedReader(new FileReader("BookList.txt"))) {
            String word;
            while ((word = br.readLine()) != null) {
                if (isNum) { // if line contains reference num, adds to corresponding ArrayList
                    referenceNums.add(Integer.parseInt(word));
                } else { // otherwise, adds title to books and alternates isNum value;
                    books.add(word);
                }
                isNum = !isNum;
            }
        } catch (IOException e) {
            e.printStackTrace();
        }

        // Copying values of referenceNums ArrayList to referenceList Array
        referenceList = new int[referenceNums.size()];
        for (int i = 0; i < referenceNums.size(); i++) {
            referenceList[i] = referenceNums.get(i);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lblTitle = new javax.swing.JLabel();
        lblInstruction = new javax.swing.JLabel();
        lblPurpose = new javax.swing.JLabel();
        txtReferenceNum = new javax.swing.JTextField();
        lblSearch = new javax.swing.JLabel();
        lblBinary = new javax.swing.JLabel();
        lblLinear = new javax.swing.JLabel();
        txtError = new javax.swing.JTextField();
        separator = new javax.swing.JSeparator();
        txtLinearSearch = new javax.swing.JTextField();
        txtBinarySearch = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        lblTitle.setFont(new java.awt.Font("Serif", 0, 30)); // NOI18N
        lblTitle.setForeground(new java.awt.Color(153, 0, 51));
        lblTitle.setText("Children's Classics");

        lblInstruction.setText("This program will find the title of a book according to the library reference number.");

        lblPurpose.setText("The program will use a Binary and a Linear Search");

        txtReferenceNum.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtReferenceNumKeyReleased(evt);
            }
        });

        lblSearch.setFont(new java.awt.Font("Serif", 1, 18)); // NOI18N
        lblSearch.setText("ENTER THE REFERENCE #:");

        lblBinary.setText("Binary Search:");

        lblLinear.setText("Linear Search:");

        txtError.setEditable(false);
        txtError.setForeground(new java.awt.Color(204, 0, 51));
        txtError.setFocusable(false);

        txtLinearSearch.setEditable(false);

        txtBinarySearch.setEditable(false);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(separator)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(60, 60, 60)
                                .addComponent(lblSearch)
                                .addGap(18, 18, 18)
                                .addComponent(txtReferenceNum, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(30, 30, 30)
                                .addComponent(lblInstruction))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(110, 110, 110)
                                .addComponent(lblPurpose))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(130, 130, 130)
                                .addComponent(lblTitle))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(30, 30, 30)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(lblLinear)
                                    .addComponent(lblBinary))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(txtLinearSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 351, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(txtBinarySearch, javax.swing.GroupLayout.PREFERRED_SIZE, 351, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(txtError, javax.swing.GroupLayout.PREFERRED_SIZE, 295, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addComponent(lblTitle, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(lblInstruction)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lblPurpose)
                .addGap(40, 40, 40)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtReferenceNum, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblSearch))
                .addGap(30, 30, 30)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblLinear)
                    .addComponent(txtLinearSearch, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblBinary)
                    .addComponent(txtBinarySearch, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(26, 26, 26)
                .addComponent(separator, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtError, javax.swing.GroupLayout.DEFAULT_SIZE, 33, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void txtReferenceNumKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtReferenceNumKeyReleased
        //Resetting all textfields
        txtError.setText("");
        txtLinearSearch.setText("");
        txtBinarySearch.setText("");
        //If textfield is empty
        if (txtReferenceNum.getText().isEmpty()) return;
        
        //Searching for reference number in books
        try {
            int v = Integer.parseInt(txtReferenceNum.getText());
            int temp; //temporarily storing index returned by search algorithm
            
            // Linear Search and display
            if ((temp = sortedLinearSearch(v)) != -1) {
                txtLinearSearch.setText(books.get(temp));
            }
            // Binary Search and display
            if ((temp = binarySearch(0, referenceList.length - 1, v)) != -1) {
                txtBinarySearch.setText(books.get(temp));
                return;
            }
            
            // if binary search algorithm returned -1
            txtError.setText("Reference number was not found");
        } catch (NumberFormatException e) {
            // if given text was not an interger
            txtError.setText("Reference Number is not an integer");
        }
    }//GEN-LAST:event_txtReferenceNumKeyReleased
    
    /**
     * Uses sorted linear search to find a given value
     * @param v The value that is being searched for in referenceList
     * @return The index of v in referenceList or -1 if not found
     */
    public int sortedLinearSearch(int v) {
        // loops through entire array
        for (int k=0; k < referenceList.length; k++) {
            if (referenceList[k] > v) return -1; // exits if value is skipped over 
            if (referenceList[k] - v == 0) return k; // exits if value is equal to element in array
        }
        return -1; // value not found in array
    }
    
    /**
     * Uses binary search to find a given value
     * @param left The index of the left most element of the search range
     * @param right The index of the right most element of the search range
     * @param v The value that is being searched for
     * @return The index of v in referenceList or -1 if not found
     */
    public int binarySearch(int left, int right, int v) {
        if (left > right) return -1; // if range is smaller than 0

        int middle = (left + right) / 2; 
        int compare = v - referenceList[middle]; // comparing the search value to middle element
        
        if (compare == 0) {
            return middle; // if value is equal to middle element
        } else if (compare < 0) {
            return binarySearch(left, middle - 1, v); // recursively searches with only left half of current range
        } else { //compare > 0
            return binarySearch(middle + 1, right, v); // recursively searches with only right half of current range
        }
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(U3A3_AmyZhang.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(U3A3_AmyZhang.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(U3A3_AmyZhang.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(U3A3_AmyZhang.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new U3A3_AmyZhang().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel lblBinary;
    private javax.swing.JLabel lblInstruction;
    private javax.swing.JLabel lblLinear;
    private javax.swing.JLabel lblPurpose;
    private javax.swing.JLabel lblSearch;
    private javax.swing.JLabel lblTitle;
    private javax.swing.JSeparator separator;
    private javax.swing.JTextField txtBinarySearch;
    private javax.swing.JTextField txtError;
    private javax.swing.JTextField txtLinearSearch;
    private javax.swing.JTextField txtReferenceNum;
    // End of variables declaration//GEN-END:variables
}
